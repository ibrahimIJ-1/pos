generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Define all models below

model User {
  id                    String                @id @default(uuid())
  name                  String
  email                 String                @unique
  password              String
  roles                 Role[]                @relation("UserRoles")
  additionalPermissions UserPermission[]      @relation("UserPermissions")
  avatar                String?
  active                Boolean               @default(true)
  created_at            DateTime              @default(now()) @map("created_at")
  updated_at            DateTime              @updatedAt @map("updated_at")
  sales                 Sale[]                @relation("UserSales")
  transactions          RegisterTransaction[] @relation("UserTransactions")
  registers             Register[]            @relation("UserRegisters")
  branchId              String?               @map("branch_id")
  mainBranch            Branch?               @relation("MainBranch", fields: [branchId], references: [id])
  branches              Branch[]              @relation("UserBranches")
  lang                  String                @default("en")
  Refund                Refund[]              @relation("UserRefunds")

  // Optional: if you filter by active status frequently
  // @@index([active])
  @@map("users")
}

model Role {
  id          String       @id @default(uuid())
  name        String       @unique
  permissions Permission[] @relation("RolePermissions")
  users       User[]       @relation("UserRoles")
  created_at  DateTime     @default(now()) @map("created_at")
  updated_at  DateTime     @updatedAt @map("updated_at")

  @@map("roles")
}

model Permission {
  id         String           @id @default(uuid())
  name       String           @unique
  roles      Role[]           @relation("RolePermissions")
  users      UserPermission[] @relation("PermissionUsers")
  created_at DateTime         @default(now()) @map("created_at")
  updated_at DateTime         @updatedAt @map("updated_at")

  @@map("permissions")
}

model UserPermission {
  id           String     @id @default(uuid())
  userId       String     @map("user_id")
  permissionId String     @map("permission_id")
  user         User       @relation("UserPermissions", fields: [userId], references: [id], onDelete: Cascade)
  permission   Permission @relation("PermissionUsers", fields: [permissionId], references: [id], onDelete: Cascade)
  created_at   DateTime   @default(now()) @map("created_at")
  updated_at   DateTime   @updatedAt @map("updated_at")
  // Optional: if you often query permissions by user
  // @@index([userId])

  @@unique([userId, permissionId])
  @@map("user_permissions")
}

model Product {
  id                        String                      @id @default(uuid())
  name                      String
  description               String                      @db.Text
  sku                       String                      @unique
  barcode                   String?                     @unique
  category                  String
  image_url                 String?                     @map("image_url") @db.Text
  created_at                DateTime                    @default(now()) @map("created_at")
  updated_at                DateTime                    @updatedAt @map("updated_at")
  saleItems                 SaleItem[]
  discountProducts          Discount[]                  @relation("DiscountProducts")
  cartItem                  CartItem[]
  // Optional: if you frequently filter active products
  // @@index([active])
  BranchProduct             BranchProduct[]
  RefundItem                RefundItem[]                @relation("ProductRefunds")
  WarehouseTransactionItems WarehouseTransactionItems[]

  @@index([category])
  @@map("products")
}

model Customer {
  id          String   @id @default(uuid())
  name        String
  email       String?  @unique
  phone       String?
  address     String?
  city        String?
  state       String?
  postal_code String?  @map("postal_code")
  country     String?
  tax_exempt  Boolean  @default(false) @map("tax_exempt")
  notes       String?  @db.Text
  created_at  DateTime @default(now()) @map("created_at")
  updated_at  DateTime @updatedAt @map("updated_at")
  sales       Sale[]
  Refund      Refund[]

  @@map("customers")
}

model Sale {
  id               String         @id @default(uuid())
  saleNumber       String?        @unique @map("sale_number")
  customerId       String?        @map("customer_id")
  customer         Customer?      @relation(fields: [customerId], references: [id])
  cashierId        String         @map("cashier_id")
  cashier          User           @relation("UserSales", fields: [cashierId], references: [id])
  subtotal         Decimal        @db.Decimal(10, 2)
  taxTotal         Decimal        @map("tax_total") @db.Decimal(10, 2)
  discountTotal    Decimal        @map("discount_total") @db.Decimal(10, 2)
  totalAmount      Decimal        @map("total_amount") @db.Decimal(10, 2)
  paymentMethod    String         @map("payment_method")
  paymentStatus    String         @map("payment_status")
  notes            String?        @db.Text
  created_at       DateTime?      @default(now()) @map("created_at")
  updated_at       DateTime?      @updatedAt @map("updated_at")
  items            SaleItem[]
  discountsApplied SaleDiscount[] @relation("SaleDiscounts")
  register         Register?      @relation(fields: [registerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  registerId       String?        @map("register_id")
  branchId         String         @map("branch_id")
  branch           Branch         @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // Optionally, if you filter by date range:
  // @@index([created_at])
  Refund           Refund[]

  @@index([cashierId])
  @@map("sales")
}

model SaleItem {
  id               String       @id @default(uuid())
  refundedQuantity Int          @default(0)
  saleId           String       @map("sale_id")
  sale             Sale         @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId        String       @map("product_id")
  product          Product      @relation(fields: [productId], references: [id])
  productName      String       @map("product_name")
  quantity         Int
  unitPrice        Decimal      @map("unit_price") @db.Decimal(10, 2)
  discountAmount   Decimal      @map("discount_amount") @db.Decimal(10, 2)
  taxAmount        Decimal      @map("tax_amount") @db.Decimal(10, 2)
  subtotal         Decimal      @db.Decimal(10, 2)
  created_at       DateTime     @default(now()) @map("created_at")
  updated_at       DateTime     @updatedAt @map("updated_at")
  RefundItem       RefundItem[]

  @@index([saleId])
  @@map("sale_items")
}

model Register {
  id               String                @id @default(uuid())
  name             String
  status           RegisterStatus        @default(CLOSED)
  currentCashierId String?               @map("current_cashier_id")
  cashier          User?                 @relation("UserRegisters", fields: [currentCashierId], references: [id])
  openingBalance   Decimal               @map("opening_balance") @db.Decimal(10, 2)
  closingBalance   Decimal?              @map("closing_balance") @db.Decimal(10, 2)
  openedAt         DateTime?             @map("opened_at")
  closedAt         DateTime?             @map("closed_at")
  created_at       DateTime              @default(now()) @map("created_at")
  updated_at       DateTime              @updatedAt @map("updated_at")
  transactions     RegisterTransaction[]
  sales            Sale[]
  branchId         String                @map("branch_id")
  branch           Branch                @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // Optional: if you filter by status:
  // @@index([status])
  Refund           Refund[]

  @@map("registers")
}

model RegisterTransaction {
  id            String          @id @default(uuid())
  registerId    String          @map("register_id")
  register      Register        @relation(fields: [registerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  type          TransactionType
  referenceId   String?         @map("reference_id")
  amount        Decimal         @db.Decimal(10, 2)
  paymentMethod String          @map("payment_method")
  description   String
  cashierId     String          @map("cashier_id")
  cashier       User            @relation("UserTransactions", fields: [cashierId], references: [id])
  branchId      String          @map("branch_id")
  branch        Branch          @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at    DateTime        @default(now()) @map("created_at")

  @@index([registerId])
  @@index([cashierId])
  @@index([branchId])
  @@map("register_transactions")
}

model Discount {
  id                String            @id @default(uuid())
  name              String
  code              String?           @unique
  type              DiscountType
  value             Decimal           @db.Decimal(10, 2)
  minPurchaseAmount Decimal?          @map("min_purchase_amount") @db.Decimal(10, 2)
  appliesTo         DiscountAppliesTo @map("applies_to")
  products          Product[]         @relation("DiscountProducts")
  categoryIds       String?           @map("category_ids") @db.Text
  buyXQuantity      Int?              @map("buy_x_quantity")
  getYQuantity      Int?              @map("get_y_quantity")
  startDate         DateTime          @map("start_date")
  endDate           DateTime?         @map("end_date")
  maxUses           Int?              @map("max_uses")
  currentUses       Int               @default(0) @map("current_uses")
  isActive          Boolean           @default(true) @map("is_active")
  created_at        DateTime          @default(now()) @map("created_at")
  updated_at        DateTime          @updatedAt @map("updated_at")
  sales             SaleDiscount[]    @relation("DiscountSales")
  refunds           RefundDiscount[]  @relation("DiscountRefunds")
  branches          Branch[]          @relation("DiscountBranches")

  @@index([isActive, startDate, endDate])
  @@map("discounts")
}

model SaleDiscount {
  id         String   @id @default(uuid())
  saleId     String   @map("sale_id")
  sale       Sale     @relation("SaleDiscounts", fields: [saleId], references: [id], onDelete: Cascade)
  discountId String   @map("discount_id")
  discount   Discount @relation("DiscountSales", fields: [discountId], references: [id])
  amount     Decimal  @db.Decimal(10, 2)
  created_at DateTime @default(now()) @map("created_at")

  @@unique([saleId, discountId])
  @@map("sale_discounts")
}

model Settings {
  id         String   @id @default(uuid())
  key        String   @unique
  value      String   @db.Text
  category   String
  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @updatedAt @map("updated_at")

  @@map("settings")
}

model Cart {
  id         String     @id @default(uuid())
  userId     String     @map("user_id")
  name       String     @default("Default Cart")
  isActive   Boolean    @default(true) @map("is_active")
  items      CartItem[]
  customerId String?    @map("customer_id")
  discountId String?    @map("discount_id")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  branchId   String     @map("branch_id")
  branch     Branch     @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId, isActive])
  @@map("carts")
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String   @map("cart_id")
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String   @map("product_id")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  name      String
  price     Decimal  @db.Decimal(10, 2)
  quantity  Int
  taxRate   Decimal  @map("tax_rate") @db.Decimal(5, 2)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([cartId, productId])
  @@map("cart_items")
}

model Branch {
  id                    String                      @id @default(uuid())
  name                  String
  address               String?
  isActive              Boolean                     @default(true) @map("is_active")
  isWarehouse           Boolean                     @default(false) @map("is_warehouse")
  created_at            DateTime                    @default(now()) @map("created_at")
  updated_at            DateTime                    @updatedAt @map("updated_at")
  Register              Register[]
  RegisterTransaction   RegisterTransaction[]
  Sale                  Sale[]
  BranchProduct         BranchProduct[]
  discountBranches      Discount[]                  @relation("DiscountBranches")
  Cart                  Cart[]
  mainBranchUsers       User[]                      @relation("MainBranch")
  users                 User[]                      @relation("UserBranches")
  Refund                Refund[]
  Shelf                 Shelf[]
  WarehouseTransaction  WarehouseTransaction[]
  WarehouseTransactions WarehouseTransactionItems[]

  @@map("branches")
}

model BranchProduct {
  id                  String   @id @default(uuid())
  branchId            String   @map("branch_id")
  branch              Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  productId           String   @map("product_id")
  product             Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  price               Decimal  @db.Decimal(10, 2)
  cost                Decimal  @db.Decimal(10, 2)
  taxRate             Decimal  @map("tax_rate") @db.Decimal(5, 2)
  stock               Int
  low_stock_threshold Int      @map("low_stock_threshold")
  isActive            Boolean  @default(true) @map("is_active")
  created_at          DateTime @default(now()) @map("created_at")
  updated_at          DateTime @updatedAt @map("updated_at")

  @@unique([productId, branchId])
  @@map("branch_products")
}

model Refund {
  id               String           @id @default(uuid())
  saleId           String           @map("sale_id")
  sale             Sale             @relation(fields: [saleId], references: [id], onDelete: Cascade)
  customerId       String?          @map("customer_id")
  customer         Customer?        @relation(fields: [customerId], references: [id])
  cashierId        String           @map("cashier_id")
  cashier          User             @relation("UserRefunds", fields: [cashierId], references: [id])
  subtotal         Decimal          @db.Decimal(10, 2)
  taxTotal         Decimal          @map("tax_total") @db.Decimal(10, 2)
  discountTotal    Decimal          @map("discount_total") @db.Decimal(10, 2)
  totalAmount      Decimal          @map("total_amount") @db.Decimal(10, 2)
  paymentMethod    String           @map("payment_method")
  paymentStatus    String           @map("payment_status")
  notes            String?          @db.Text
  reason           String?
  status           RefundStatus     @default(PENDING)
  created_at       DateTime?        @default(now()) @map("created_at")
  updated_at       DateTime?        @updatedAt @map("updated_at")
  items            RefundItem[]
  discountsApplied RefundDiscount[] @relation("RefundDiscounts")
  register         Register?        @relation(fields: [registerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  registerId       String?          @map("register_id")
  branchId         String           @map("branch_id")
  branch           Branch           @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([branchId, status])
  @@index([cashierId])
  @@map("refunds")
}

model RefundItem {
  id             String   @id @default(uuid())
  refundId       String   @map("refund_id")
  refund         Refund   @relation(fields: [refundId], references: [id], onDelete: Cascade)
  productId      String   @map("product_id")
  product        Product  @relation("ProductRefunds", fields: [productId], references: [id])
  productName    String   @map("product_name")
  quantity       Int
  unitPrice      Decimal  @map("unit_price") @db.Decimal(10, 2)
  discountAmount Decimal  @map("discount_amount") @db.Decimal(10, 2)
  taxAmount      Decimal  @map("tax_amount") @db.Decimal(10, 2)
  subtotal       Decimal  @db.Decimal(10, 2)
  saleItemId     String   @map("sale_item_id")
  saleItem       SaleItem @relation(fields: [saleItemId], references: [id])
  created_at     DateTime @default(now()) @map("created_at")
  updated_at     DateTime @updatedAt @map("updated_at")

  @@index([refundId])
  @@index([saleItemId])
  @@map("refund_items")
}

model RefundDiscount {
  id         String   @id @default(uuid())
  refundId   String   @map("refund_id")
  refund     Refund   @relation("RefundDiscounts", fields: [refundId], references: [id], onDelete: Cascade)
  discountId String   @map("discount_id")
  discount   Discount @relation("DiscountRefunds", fields: [discountId], references: [id])
  amount     Decimal  @db.Decimal(10, 2)
  created_at DateTime @default(now()) @map("created_at")

  @@unique([refundId, discountId])
  @@map("refund_discounts")
}

model Shelf {
  id                    String                      @id @default(uuid())
  name                  String                      @map("name")
  location              String?                     @map("location")
  warehouse             Branch                      @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  warehouseId           String                      @map("warehouse_id")
  created_at            DateTime                    @default(now()) @map("created_at")
  updated_at            DateTime                    @updatedAt @map("updated_at")
  WarehouseTransactions WarehouseTransactionItems[]

  @@map("shelves")
}

model WarehouseTransaction {
  id              String                   @id @default(uuid())
  code            String                   @map("code")
  date            DateTime?                @map("date")
  status          GeneralStatus            @default(PENDING)
  warehouse       Branch                   @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  warehouseId     String                   @map("warehouse_id")
  transactionType WarehouseTransactionType
  created_at      DateTime                 @default(now()) @map("created_at")
  updated_at      DateTime                 @updatedAt @map("updated_at")

  warehouseTransactionItems WarehouseTransactionItems[] @relation("WarehouseTransactions")

  @@map("warehouse_transaction")
}

model WarehouseTransactionItems {
  id          String  @id @default(uuid())
  warehouseId String  @map("warehouse_id")
  warehouse   Branch  @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  shelfId     String? @map("shelf_id")
  shelf       Shelf?  @relation(fields: [shelfId], references: [id], onDelete: SetNull)
  productId   String  @map("product_id")
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity    Decimal @db.Decimal(10, 2)

  referenceId String    @map("reference_id")
  deletedAt   DateTime? @map("deleted_at")
  created_at  DateTime  @default(now()) @map("created_at")
  updated_at  DateTime  @updatedAt @map("updated_at")

  warehouseTransaction WarehouseTransaction @relation("WarehouseTransactions", fields: [referenceId], references: [id])

  @@map("warehouse_transactions")
}

// Enums
enum RegisterStatus {
  OPEN
  CLOSED
}

enum TransactionType {
  SALE
  REFUND
  EXPENSE
  CASH_IN
  CASH_OUT
}

enum DiscountType {
  PERCENTAGE
  FIXED
  BUY_X_GET_Y
}

enum DiscountAppliesTo {
  ENTIRE_ORDER
  SPECIFIC_PRODUCTS
  SPECIFIC_CATEGORIES
}

enum RefundStatus {
  PENDING
  COMPLETED
  DECLINED
  CANCELLED
}

enum GeneralStatus {
  PENDING
  COMPLETED
  DECLINED
  CANCELLED
}

enum WarehouseTransactionType {
  StockIn
  StockOut
  StockTransfer
  BranchTransfer
}
